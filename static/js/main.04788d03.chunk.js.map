{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["CATALOG_URL","STORAGE_KEY","fetchArticles","_callee2","catalog","regenerator_default","a","wrap","_context2","prev","next","localStorage","getItem","fetch","sent","text","setItem","abrupt","trim","split","reverse","map","line","_line$match","match","_line$match2","Object","slicedToArray","name","id","slice","stop","Counter","state","articles","search","filterResults","searchTerm","filteredArticles","_this","filter","article","toLowerCase","indexOf","setState","handleInputUpdate","event","target","value","this","maxArticles","react","className","type","placeholder","onChange","item","index","rel","href","concat","React","Boolean","window","location","hostname","ReactDOM","render","react_default","createElement","App_Counter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAEMA,EAAW,0DACXC,EAAW,6BAOFC,8EAAf,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACMN,EAAUO,aAAaC,QAAQX,GADrC,CAAAO,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAG2BG,MAAMb,GAHjC,cAAAQ,EAAAE,KAAA,EAAAF,EAAAM,KAG+CC,OAH/C,OAGIX,EAHJI,EAAAM,KAIIH,aAAaK,QAAQf,EAAaG,GAJtC,cAAAI,EAAAS,OAAA,SAOSb,EACJc,OACAC,MAFI,MAGJC,UACAC,IAAI,SAAAC,GAAQ,IAAAC,EAEWD,EAAKE,MAAM,mBAFtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAAE,EAAA,GAGX,MAAO,CAAEG,KAHEH,EAAA,GAGII,GAHJJ,EAAA,MAKZK,MAAM,EAAG,MAhBd,wBAAAtB,EAAAuB,SAAA5B,iCA0BqB6B,6MACnBC,MAAe,CACbC,SAAU,GACVC,OAAQ,MAQVC,cAAgB,SAAAC,GACd,IAAIC,EAAmBC,EAAKN,MAAMC,SAClCI,EAAmBA,EAAiBE,OAAO,SAAAC,GAEzC,OAA0D,IADxCA,EAAQb,KAAKc,cACZC,QAAQN,EAAWK,iBAExCH,EAAKK,SAAS,CACZV,SAAUI,OAIdO,kBAAoB,SAACC,GACnBP,EAAKK,SAAS,CAAET,OAAQW,EAAMC,OAAOC,QACrCT,EAAKH,cAAcU,EAAMC,OAAOC,yNAjBT9C,WAAjBgC,SACNe,KAAKL,SAAS,CAAEV,gJAmBW,IAEvBgB,EADiBD,KAAKhB,MAAlBC,SACmBJ,MAAM,EA7DX,IA+DtB,OACEqB,EAAA,sBAAMC,UAAU,iBACdD,EAAA,qBAAKC,UAAU,uBACbD,EAAA,uBACEC,UAAU,SACVC,KAAK,OACLC,YAAY,2BACZC,SAAUN,KAAKJ,kBACfG,MAAOC,KAAKhB,MAAME,SAEpBgB,EAAA,qBAAKC,UAAU,WACbD,EAAA,oBAAIC,UAAU,YACXF,EAAY7B,IAAI,SAACmC,EAAMC,GACtB,MAAO,CACLN,EAAA,wBACEA,EAAA,mBACEJ,OAAO,SACPW,IAAI,sBACJC,MA/EC9B,EA+EmB2B,EAAK3B,GA9E7C,oCAAA+B,OAA2C/B,KAgFtB2B,EAAK5B,QAjF5B,IAAuBC,eA8BcgC,aCxBjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzC,MACvB,2DCXN0C,IAASC,OAAOC,EAAA9D,EAAA+D,cAACC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.04788d03.chunk.js","sourcesContent":["import * as React from \"react\";\n\nconst CATALOG_URL = `https://cdn.mxpnl.com/static/misc/gutenberg-catalog.txt`;\nconst STORAGE_KEY = `gutenberg-catalog`;\nconst MAX_DISPLAY_ITEMS = 50;\n\nfunction getArticleUrl(id) {\n  return `https://www.gutenberg.org/ebooks/${id}`;\n}\n\nasync function fetchArticles() {\n  let catalog = localStorage.getItem(STORAGE_KEY);\n  if (!catalog) {\n    catalog = await (await fetch(CATALOG_URL)).text();\n    localStorage.setItem(STORAGE_KEY, catalog);\n  }\n\n  return catalog\n    .trim()\n    .split(`\\n`)\n    .reverse()\n    .map(line => {\n      // parse article's name and id into object\n      const [_, name, id] = line.match(/^(.*?)\\s+(\\d+)$/);\n      return { name, id };\n    })\n    .slice(0, 200); // TODO: remove this when ready\n}\n\ninterface Props {}\n\ninterface State {\n  articles: Array<{ id: string; name: string }>;\n  search: string;\n}\n\nexport default class Counter extends React.Component<Props, State> {\n  state: State = {\n    articles: [],\n    search: \"\"\n  };\n\n  async componentDidMount() {\n    const articles = await fetchArticles();\n    this.setState({ articles });\n  }\n\n  filterResults = searchTerm => {\n    let filteredArticles = this.state.articles;\n    filteredArticles = filteredArticles.filter(article => {\n      let articleName = article.name.toLowerCase();\n      return articleName.indexOf(searchTerm.toLowerCase()) !== -1;\n    });\n    this.setState({\n      articles: filteredArticles\n    });\n  };\n\n  handleInputUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ search: event.target.value });\n    this.filterResults(event.target.value);\n  };\n\n  render(): React.ReactElement {\n    const { articles } = this.state;\n    var maxArticles = articles.slice(0, MAX_DISPLAY_ITEMS);\n\n    return (\n      <main className=\"layout-search\">\n        <div className=\"layout-search-inner\">\n          <input\n            className=\"search\"\n            type=\"text\"\n            placeholder=\"Search Gutenberg Catalog\"\n            onChange={this.handleInputUpdate}\n            value={this.state.search}\n          />\n          <div className=\"results\">\n            <ul className=\"articles\">\n              {maxArticles.map((item, index) => {\n                return [\n                  <li>\n                    <a\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href={getArticleUrl(item.id)}\n                    >\n                      {item.name}\n                    </a>\n                  </li>\n                ];\n              })}\n            </ul>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
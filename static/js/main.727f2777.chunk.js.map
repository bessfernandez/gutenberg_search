{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["CATALOG_URL","STORAGE_KEY","MAX_DISPLAY_ITEMS","fetchArticles","_callee2","catalog","regenerator_default","a","wrap","_context2","prev","next","localStorage","getItem","fetch","sent","text","setItem","t0","name","Error","abrupt","trim","split","reverse","map","line","_line$match","match","_line$match2","Object","slicedToArray","origName","id","stop","GutenbergSearch","state","articles","filteredArticles","filterTime","resultsCount","search","resultsTimerId","filterStartTime","Date","searchInput","React","filterStartTimer","start","_this","stopTimer","timeDifferenceInMillis","getMilliseconds","setState","searchArticles","searchTerm","length","resetArticleNames","filter","article","toLowerCase","indexOf","addSearchMatchMarkup","regexMatch","RegExp","forEach","item","index","nameMatch","replace","concat","filterResults","filteredArticlesWithMarkup","slice","handleInputUpdate","event","target","value","handleElementScroll","element","offsetHeight","scrollTop","scrollHeight","handleKeyDown","arguments","undefined","keyCode","preventDefault","nodeName","current","children","focus","parentElement","previousSibling","this","_this2","__html","_this3","react","className","type","placeholder","onKeyDown","onChange","Math","sign","onScroll","key","ref","rel","tabIndex","data-index","href","dangerouslySetInnerHTML","createMarkup","Boolean","window","location","hostname","ReactDOM","render","react_default","createElement","App_GutenbergSearch","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.727f2777.chunk.js","sourcesContent":["import * as React from \"react\";\n\nconst CATALOG_URL = `https://cdn.mxpnl.com/static/misc/gutenberg-catalog.txt`;\nconst STORAGE_KEY = `gutenberg-catalog`;\nconst MAX_DISPLAY_ITEMS = 50;\n\nfunction getArticleUrl(id: string) {\n  return `https://www.gutenberg.org/ebooks/${id}`;\n}\n\nasync function fetchArticles(): Promise<any> {\n  let catalog = localStorage.getItem(STORAGE_KEY);\n  if (!catalog) {\n    try {\n      catalog = await (await fetch(CATALOG_URL)).text();\n      localStorage.setItem(STORAGE_KEY, catalog);\n    } catch (error) {\n      if (error.name === \"QuotaExceededError\") {\n        throw new Error(\"Sorry local storage limit is exceeded\");\n      } else {\n        throw new Error(\"Unable to load articles\");\n      }\n    }\n  }\n\n  return catalog\n    .trim()\n    .split(`\\n`)\n    .reverse()\n    .map(line => {\n      // parse article's name and id into object\n      const [_, name, id] = line.match(/^(.*?)\\s+(\\d+)$/);\n      return { name, origName: name, id };\n    });\n}\n\ninterface Props {}\n\ninterface State {\n  articles: Array<{ id: string; name: string; origName: string }>;\n  filteredArticles: Array<{ id: string; origName: string; name: string }>;\n  filterTime: number;\n  resultsCount: number;\n  search: string;\n}\n\nexport default class GutenbergSearch extends React.Component<Props, State> {\n  state: State = {\n    articles: [],\n    filteredArticles: [],\n    filterTime: 0,\n    resultsCount: 0,\n    search: \"\"\n  };\n\n  resultsTimerId: any = null;\n  filterStartTime: Date = new Date(null || 0);\n  searchInput = React.createRef();\n\n  async componentDidMount() {\n    const articles = await fetchArticles();\n    this.setState({ articles }, () => {\n      // after articles are finished being set in state update filtered articles\n      // for display at their max display count\n      this.setState({\n        filteredArticles: this.state.articles.slice(0, MAX_DISPLAY_ITEMS)\n      });\n    });\n  }\n\n  filterStartTimer = (start: Date) => {\n    if (!this.resultsTimerId) {\n      this.filterStartTime = start;\n    }\n  };\n\n  stopTimer = () => {\n    let stopTime: Date = new Date();\n    let timeDifferenceInMillis: number =\n      stopTime.getMilliseconds() - this.filterStartTime.getMilliseconds();\n\n    this.setState({\n      filterTime: timeDifferenceInMillis\n    });\n  };\n\n  searchArticles = (searchTerm: string) => {\n    // start searching only past 3 chars to optimize performance\n    if (searchTerm.length > 3) {\n      let filteredArticles = this.state.articles;\n\n      // reset each filtered article to its original name -\n      // in case name has been augment through previous filter operation\n      this.resetArticleNames();\n\n      // return only articles where search term appears in name\n      return (filteredArticles = filteredArticles.filter(article => {\n        let articleName = article.name.toLowerCase();\n        return articleName.indexOf(searchTerm.toLowerCase()) !== -1;\n      }));\n    }\n  };\n\n  addSearchMatchMarkup = (searchTerm: string, filteredArticles) => {\n    let regexMatch = new RegExp(searchTerm, \"gi\");\n\n    // wrap matched search term with markup\n    filteredArticles.forEach((item, index) => {\n      let nameMatch = item.name.match(regexMatch);\n\n      // match name making sure to use explicit match so casing is preserved\n      if (nameMatch) {\n        item.name = item.name.replace(\n          nameMatch[0],\n          `<span class=\"highlight\">${nameMatch[0]}</span>`\n        );\n      }\n    });\n\n    return filteredArticles;\n  };\n\n  resetArticleNames = () => {\n    this.state.filteredArticles.forEach((item, index) => {\n      item.name = item.origName;\n    });\n  };\n\n  filterResults = searchTerm => {\n    let start = new Date();\n    this.filterStartTimer(start);\n\n    // start searching only past 3 chars to optimize performance\n    if (searchTerm.length > 3) {\n      // filter articles based on search term\n      let filteredArticles = this.searchArticles(searchTerm);\n\n      if (filteredArticles) {\n        // wrap matched search term with markup\n        let filteredArticlesWithMarkup = this.addSearchMatchMarkup(\n          searchTerm,\n          filteredArticles\n        );\n\n        if (filteredArticlesWithMarkup) {\n          // set state with updated filtered articles and result count\n          // after state is done being set stop the timer and set back to null\n          this.setState(\n            {\n              filteredArticles: filteredArticlesWithMarkup,\n              resultsCount: filteredArticles.length\n            },\n            () => {\n              this.stopTimer();\n              this.resultsTimerId = null;\n            }\n          );\n        }\n      }\n    } else {\n      this.resetArticleNames();\n\n      // reset articles on empty search\n      if (searchTerm.length === 0) {\n        this.stopTimer();\n        this.resultsTimerId = null;\n      }\n\n      // reset filtered article state back to its max display\n      this.setState({\n        filteredArticles: this.state.articles.slice(0, MAX_DISPLAY_ITEMS),\n        resultsCount: 0\n      });\n    }\n  };\n\n  handleInputUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ search: event.target.value });\n    // filter articles based on search term\n    this.filterResults(event.target.value);\n  };\n\n  handleElementScroll = (event: React.ChangeEvent<any>) => {\n    // only augment state of filtered results when not searching\n    if (!this.state.search.length) {\n      let element = event.target;\n\n      // every time user reaches the bottom of scroll overflow add another chunk\n      // of MAX_DISPLAY_ITEMS\n      if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\n        this.setState({\n          filteredArticles: this.state.articles.slice(\n            0,\n            this.state.filteredArticles.length + MAX_DISPLAY_ITEMS\n          )\n        });\n      }\n    }\n  };\n\n  handleKeyDown = (event, index = 0) => {\n    // handle down arrow\n    if (event.keyCode === 40) {\n      event.preventDefault();\n\n      // when on input focus on next child element which is <li>\n      if (event.target.nodeName === \"INPUT\") {\n        // @ts-ignore\n        this.searchInput.current.children[0].focus();\n      } else if (event.target.nodeName === \"A\") {\n        // when already within anchor navigate up to parent and find next li + anchor\n        // based on index\n        // @ts-ignore\n        this.searchInput.current.parentElement.children[\n          index + 1\n        ].children[0].focus();\n      }\n    } else if (event.keyCode === 38) {\n      event.preventDefault();\n\n      if (event.target.nodeName === \"A\") {\n        if (index === 0) {\n          // when on first anchor walk back up the tree to the input element\n          // @ts-ignore\n          this.searchInput.current.parentElement.parentElement.previousSibling.focus();\n        } else {\n          // when already within anchor navigate up to parent and previous next li + anchor\n          // based on index\n          // @ts-ignore\n          this.searchInput.current.parentElement.children[\n            index - 1\n          ].children[0].focus();\n        }\n      }\n    }\n  };\n\n  createMarkup(name) {\n    // allow React markup to render provided HTML\n    // Note: this is not suggested and could have serious\n    // security implications\n    // https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml\n    return { __html: name };\n  }\n\n  render(): React.ReactElement {\n    const { filteredArticles } = this.state;\n\n    return (\n      <main className=\"layout-search\">\n        <div className=\"layout-search-inner\">\n          <input\n            className=\"search\"\n            type=\"text\"\n            placeholder=\"Search Gutenberg Catalog\"\n            onKeyDown={this.handleKeyDown}\n            onChange={this.handleInputUpdate}\n            value={this.state.search}\n          />\n          <div className=\"results\">\n            {!!this.state.resultsCount && (\n              <span className=\"result-count\">\n                Found {this.state.resultsCount} results in{\" \"}\n                {Math.sign(this.state.filterTime) === 1\n                  ? this.state.filterTime\n                  : 0}\n                ms\n              </span>\n            )}\n            <ul className=\"articles\" onScroll={this.handleElementScroll}>\n              {filteredArticles.map((item, index) => {\n                return [\n                  <li\n                    key={item.id}\n                    //@ts-ignore\n                    ref={index === 0 ? this.searchInput : null}\n                  >\n                    <a\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      // @ts-ignore\n                      tabIndex=\"0\"\n                      data-index={index}\n                      href={getArticleUrl(item.id)}\n                      key={index}\n                      dangerouslySetInnerHTML={this.createMarkup(item.name)}\n                      onKeyDown={event => this.handleKeyDown(event, index)}\n                    />\n                  </li>\n                ];\n              })}\n            </ul>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
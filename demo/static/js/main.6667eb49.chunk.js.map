{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["CATALOG_URL","STORAGE_KEY","MAX_DISPLAY_ITEMS","fetchArticles","_callee2","catalog","regenerator_default","a","wrap","_context2","prev","next","localStorage","getItem","fetch","sent","text","setItem","abrupt","trim","split","reverse","map","line","_line$match","match","_line$match2","Object","slicedToArray","name","origName","id","stop","Counter","state","articles","filteredArticles","search","filterResults","searchTerm","length","_this","regexMatch","RegExp","forEach","item","index","filter","article","toLowerCase","indexOf","nameMatch","replace","concat","setState","slice","handleInputUpdate","event","target","value","handleElementScroll","element","offsetHeight","scrollTop","scrollHeight","this","_this2","__html","_this3","react","className","type","placeholder","onChange","onScroll","key","rel","href","dangerouslySetInnerHTML","createMarkup","React","Boolean","window","location","hostname","ReactDOM","render","react_default","createElement","App_Counter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6667eb49.chunk.js","sourcesContent":["import * as React from \"react\";\n\nconst CATALOG_URL = `https://cdn.mxpnl.com/static/misc/gutenberg-catalog.txt`;\nconst STORAGE_KEY = `gutenberg-catalog`;\nconst MAX_DISPLAY_ITEMS = 50;\n\nfunction getArticleUrl(id) {\n  return `https://www.gutenberg.org/ebooks/${id}`;\n}\n\nasync function fetchArticles() {\n  let catalog = localStorage.getItem(STORAGE_KEY);\n  if (!catalog) {\n    catalog = await (await fetch(CATALOG_URL)).text();\n    localStorage.setItem(STORAGE_KEY, catalog);\n  }\n\n  return catalog\n    .trim()\n    .split(`\\n`)\n    .reverse()\n    .map(line => {\n      // parse article's name and id into object\n      const [_, name, id] = line.match(/^(.*?)\\s+(\\d+)$/);\n      return { name, origName: name, id };\n    });\n}\n\ninterface Props {}\n\ninterface State {\n  articles: Array<{ id: string; name: string; origName: string }>;\n  filteredArticles: Array<{ id: string; origName: string; name: string }>;\n  search: string;\n}\n\nexport default class Counter extends React.Component<Props, State> {\n  state: State = {\n    articles: [],\n    filteredArticles: [],\n    search: \"\"\n  };\n\n  async componentDidMount() {\n    const articles = await fetchArticles();\n    this.setState({ articles }, () => {\n      this.setState({\n        filteredArticles: this.state.articles.slice(0, MAX_DISPLAY_ITEMS)\n      });\n    });\n  }\n\n  filterResults = searchTerm => {\n    // start searching only past 3 chars to optimize performance\n    if (searchTerm.length > 3) {\n      let filteredArticles = this.state.articles;\n      let regexMatch = new RegExp(searchTerm, \"gi\");\n\n      // reset each filtered article to its original name -\n      // in case name has been augment through previous filter operation\n      filteredArticles.forEach((item, index) => {\n        item.name = item.origName;\n      });\n\n      // return only articles where search term appears in name\n      filteredArticles = filteredArticles.filter(article => {\n        let articleName = article.name.toLowerCase();\n        return articleName.indexOf(searchTerm.toLowerCase()) !== -1;\n      });\n\n      // wrap matched search term with markup\n      filteredArticles.forEach((item, index) => {\n        let nameMatch = item.name.match(regexMatch);\n\n        // match name making sure to use explicit match so casing is preserved\n        if (nameMatch) {\n          item.name = item.name.replace(\n            nameMatch[0],\n            `<span class=\"highlight\">${nameMatch[0]}</span>`\n          );\n        }\n      });\n\n      this.setState({\n        filteredArticles: filteredArticles\n      });\n    } else {\n      // reset filtered article state back to its max display\n      this.setState({\n        filteredArticles: this.state.articles.slice(0, MAX_DISPLAY_ITEMS)\n      });\n    }\n  };\n\n  handleInputUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ search: event.target.value });\n    this.filterResults(event.target.value);\n  };\n\n  handleElementScroll = (event: React.ChangeEvent<any>) => {\n    // only augment state of filtered results when not searching\n    if (!this.state.search.length) {\n      let element = event.target;\n      if (element.offsetHeight + element.scrollTop >= element.scrollHeight) {\n        this.setState({\n          filteredArticles: this.state.articles.slice(\n            0,\n            this.state.filteredArticles.length + MAX_DISPLAY_ITEMS\n          )\n        });\n      }\n    }\n  };\n\n  createMarkup(name) {\n    return { __html: name };\n  }\n\n  render(): React.ReactElement {\n    const { filteredArticles } = this.state;\n\n    return (\n      <main className=\"layout-search\">\n        <div className=\"layout-search-inner\">\n          <input\n            className=\"search\"\n            type=\"text\"\n            placeholder=\"Search Gutenberg Catalog\"\n            onChange={this.handleInputUpdate}\n            value={this.state.search}\n          />\n          <div className=\"results\">\n            <ul className=\"articles\" onScroll={this.handleElementScroll}>\n              {filteredArticles.map((item, index) => {\n                return [\n                  <li key={item.id}>\n                    <a\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href={getArticleUrl(item.id)}\n                      key={index}\n                      dangerouslySetInnerHTML={this.createMarkup(item.name)}\n                    />\n                  </li>\n                ];\n              })}\n            </ul>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}